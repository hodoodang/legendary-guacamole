# -*- coding: utf-8 -*-
"""다이얼

숫자를 하나 누르면 다이얼이 처음 위치로 돌아가고, 다음 숫자를 누르려면 다이얼을 처음 위치에서 다시 돌려야 한다.

숫자 1을 걸려면 총 2초가 필요하다.
1보다 큰 수를 거는데 걸리는 시간은 이보다 더 걸리며, 한 칸 옆에 있는 숫자를 걸기 위해선 1초씩 더 걸린다.

어떤 단어를 걸 때, 각 알파벳에 해당하는 숫자를 걸면 된다. 예를 들어, UNUCIC는 868242와 같다.
단어가 주어졌을 때, 이 전화를 걸기 위해서 필요한 최소 시간을 구하는 프로그램을 작성하시오.

첫째 줄에 알파벳 대문자로 이루어진 단어가 주어진다. 단어의 길이는 2보다 크거나 같고, 15보다 작거나 같다.

첫째 줄에 다이얼을 걸기 위해서 필요한 최소 시간을 출력한다.

UNUCIC 868242

8 + 6 + 8 + 2 + 4 + 2 = 30

Example:
    def solution():
        result = do_something()
        return result

    if __name__ == '__main__':

        solution()

"""

dial = {
    'A': 2,
    'B': 2,
    'C': 2,
    'D': 3,
    'E': 3,
    'F': 3,
    'G': 4,
    'H': 4,
    'I': 4,
    'J': 5,
    'K': 5,
    'L': 5,
    'M': 6,
    'N': 6,
    'O': 6,
    'P': 7,
    'Q': 7,
    'R': 7,
    'S': 7,
    'T': 8,
    'U': 8,
    'V': 8,
    'W': 9,
    'X': 9,
    'Y': 9,
    'Z': 9,
}


def solution(string: str):
    result = sum(dial[c] + 1 for c in string)
    return result


def short_code():
    """숏 코드
    문자 아스키 코드로 전환 65(A) ~ 90(Z)
    사이에 낀
    P Q R S : 80 81 82 83
    4개의 수가 동일한 몫을 가지는 값
    즉, 이전의 수는 같은 몫을 가져야 한다.
    80 - 65 = 15 나눌 수는 16
    그런데 +3 마다 다른 몫을 가져야 하므로 16 // 3 = 5 를 곱한다.
    이후의 수는 다른 몫을 가져야 한다.
    84 ~ 90 : 7개의 수를 3, 4개로 나눠야 한다.
    따라서 87 이후 min()을 통해 같은 수로 바꾼다.
    """
    print(sum(5*min(ord(x),88)//16-17for x in input()))


if __name__ == '__main__':
    # print(solution(input()))
    # short_code()
    print(16 // 3)
